import Head from "next/head";
import Image from "next/image";
// import { Inter } from "@next/font/google";
// import styles from "../styles/Home.module.css";
import { NextPage } from "next";
import { useState } from "react";
// import Header from "../components/header/header.component";
import CardGrid from "../components/card-grid/card-grid.component";
import { gql, useQuery } from "@apollo/client";
import { Card } from "../components/card-grid/card-grid.types";
// import client from "../lib/apollo-client";

export interface IHomeProps {
  products: Card[];
}
const PRODUCTS_QUERY = gql`
  query Query {
    getProducts {
      id
      name
      imageSrc
      imageAlt
      price
      brand
    }
  }
`;
const GET_PRODUCTS_PRICE = gql`
  query SortProductsByPrice($sortType: String!) {
    sortProductsByPrice(sortType: $sortType) {
      id
      name
      imageSrc
      imageAlt
      price
      brand
    }
  }
`;

const FILTER_PRODUCTS_BY_BRAND = gql`
  query FilterProductsByBrand($brand: String!) {
    filterProductsByBrand(brand: $brand) {
      id
      name
      imageSrc
      imageAlt
      price
      brand
    }
  }
`;

const Home: NextPage<IHomeProps> = ({ products }) => {
  const [query, setQuery] = useState<string>("");
  const [priceQueryASC, setPriceQueryASC] = useState<boolean>(true);
  const [priceQueryDSC, setPriceQueryDSC] = useState<boolean>(true);
  const setQueryType = (queryType: string) => {
    // the callback. Use a better name
    console.log("Render Home: queryType");
    console.log(queryType);
    setQuery(queryType);
    setPriceQueryDSC(queryType === "high_to_low" ? false : true);
    setPriceQueryASC(queryType === "low_to_high" ? false : true);
  };
  console.log("query ==");
  console.log(query);

  /* const { data, loading, error } = useQuery(PRODUCTS_QUERY, {
    skip: productsQuery,
  }); */
  const {
    data: priceDSC,
    loading: loadingDSC,
    error: priceErrorDSC,
  } = useQuery(GET_PRODUCTS_PRICE, {
    variables: {
      sortType: "DSC",
    },
    skip: priceQueryDSC,
  });

  const {
    data: priceASC,
    loading: priceLoadingASC,
    error: priceErrorASC,
  } = useQuery(GET_PRODUCTS_PRICE, {
    variables: {
      sortType: "ASC",
    },
    skip: priceQueryASC,
  });

  const {
    data: filterBrandData,
    loading: filterBrandLoading,
    error: filterBrandError,
  } = useQuery(FILTER_PRODUCTS_BY_BRAND, {
    variables: {
      brand: query,
    },
    skip: false,
  });

  products =
    priceDSC?.sortProductsByPrice ??
    priceASC?.sortProductsByPrice ??
    filterBrandData?.filterProductsByBrand;

  return (
    <div className="md:mx-72">
      <Head>
        <title>Product Listing Page</title>
        <meta
          name="description"
          content="Generated by create next app"
          key="title"
        />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <Header /> */}
      <div>
        <CardGrid cards={products} sendQuery={setQueryType} />
      </div>
    </div>
  );
};
export default Home;

/* export async function getStaticProps() {
const client = new ApolloClient({
    uri: "http://localhost:3000/api/graphql",
    cache: new InMemoryCache({
      addTypename: false,
    }),
  });
console.log('testing')
  const { data } = await client.query({
    query: PRODUCTS_QUERY,
  });
  return {
    props: {
      products: data.getProducts,
    },
  };
} */
