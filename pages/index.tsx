import Head from "next/head";
import { NextPage } from "next";
import { useState } from "react";
import CardGrid from "../components/card-grid/card-grid.component";
import { gql, useQuery } from "@apollo/client";
import { Card } from "../components/card-grid/card-grid.types";
import Banner from "../components/banner/banner.component";

export interface IHomeProps {
  products: Card[];
}
const GET_PRODUCTS_PRICE = gql`
  query SortProductsByPrice($sortType: String!) {
    sortProductsByPrice(sortType: $sortType) {
      id
      name
      imageSrc
      imageAlt
      price
      brand
    }
  }
`;

const FILTER_PRODUCTS_BY_BRAND = gql`
  query FilterProductsByBrand($brand: String!, $page: Int, $pageSize: Int) {
    filterProductsByBrand(brand: $brand, page: $page, pageSize: $pageSize) {
      id
      name
      imageSrc
      imageAlt
      price
      brand
    }
  }
`;

const PAGE_SIZE = 4;

const Home: NextPage<IHomeProps> = ({}) => {
  const [query, setQuery] = useState<string>("");
  const [priceQueryASC, setPriceQueryASC] = useState<boolean>(true);
  const [priceQueryDSC, setPriceQueryDSC] = useState<boolean>(true);
  const [page, setPage] = useState<Number>(1);
  const setQueryType = (queryType: string) => {
    setQuery(queryType);
    setPriceQueryDSC(queryType === "high_to_low" ? false : true);
    setPriceQueryASC(queryType === "low_to_high" ? false : true);
  };
  const { data: priceDSC } = useQuery(GET_PRODUCTS_PRICE, {
    variables: {
      sortType: "DSC",
    },
    skip: priceQueryDSC,
  });

  const { data: priceASC } = useQuery(GET_PRODUCTS_PRICE, {
    variables: {
      sortType: "ASC",
    },
    skip: priceQueryASC,
  });

  const {
    loading,
    error,
    data: filterBrandData,
  } = useQuery(FILTER_PRODUCTS_BY_BRAND, {
    variables: {
      brand: query,
      page: page,
      pageSize: PAGE_SIZE,
    },
  });

  const products =
    priceDSC?.sortProductsByPrice ??
    priceASC?.sortProductsByPrice ??
    filterBrandData?.filterProductsByBrand;
  const count = products?.length;
  return (
    <div className="md:mx-72 border-2 border-transparent">
      <Head>
        <title>Product Listing Page</title>
        <meta
          name="description"
          content="Generated by create next app"
          key="title"
        />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Banner />
      <div className="mb-24">
        <CardGrid cards={products} sendQuery={setQueryType} />
        <div className="flex justify-between mt-16 px-4 md:px-4 sm:px-4 lg:px-24">
          <button
            className={`inline-block px-6 py-2.5 bg-zinc-400 text-white font-medium text-xs leading-tight uppercase rounded shadow-md hover:bg-zinc-500 hover:shadow-lg focus:bg-zinc-500 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-zinc-800 active:shadow-lg transition duration-150 ease-in-out ${page === 1 ? 'opacity-20' : ''}`}
            disabled={page === 1 ? true : false}
            onClick={() => setPage((prev: any) => prev - 1)}
          >
            {" "}
            Previous{" "}
          </button>
          <span className="page-link relative block py-1.5 px-3 rounded border-0 bg-blue-600 outline-none transition-all duration-300 rounded text-white hover:text-white hover:bg-blue-600 shadow-md focus:shadow-md">{`Page ${page}`}</span>
          <button
            className={`inline-block px-6 py-2.5 bg-zinc-400 text-white font-medium text-xs leading-tight uppercase rounded shadow-md hover:bg-zinc-500 hover:shadow-lg focus:bg-zinc-500 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-zinc-800 active:shadow-lg transition duration-150 ease-in-out ${count === 0 ? 'opacity-20' : ''}`}
            disabled={count === 0}
            onClick={() => setPage((prev: any) => prev + 1)}
          >
            {" "}
            Next{" "}
          </button>
        </div>
      </div>
    </div>
  );
};
export default Home;
